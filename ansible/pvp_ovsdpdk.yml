#########################################################
# ToDo:
# - Configure to allow running OVS as root on Power
# - Add IBM repo configuration (i.e. *.repo files)
# - Does Power really need more CPUs for the VM/OVS?
########################################################
- name: T-Rex Setup
  hosts: dut
  vars_files:
    - ./test_settings.yml
  tasks:
  - debug:
      msg: Debug mode is enabled
    when: redhat_debug_mode == true

#################################################
# Check that nics are seen by kernel #
#################################################

  - stat: path=/sys/class/net/{{ dut_interface_1 }}
    register: st
  - block:
    - name: "Checking that first nic is seen by kernel"
      debug:
        msg: "exiting as first nic {{ dut_interface_1 }} cannot be seen by the kernel.  Please check settings or unbind the nic from a dpdk driver using driverctl"

    - meta: end_play
    when: not st.stat.exists

  - stat: path=/sys/class/net/{{ dut_interface_2 }}
    register: st
  - block:
    - name: "Checking that second nic is seen by kernel"
      debug:
        msg: "exiting as second nic {{ dut_interface_2 }} cannot be seen by the kernel.  Please check settings or unbind the nic from a dpdk driver using driverctl"

    - meta: end_play
    when: not st.stat.exists

######################################
######################################
# Install repositories on DUT server #
######################################

  - name: Install FedoraProject Repo
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  - name: Install needed repos stage 1
    yum:
      name: aspell,aspell-en,autoconf,automake,bc,checkpolicy
  - name: Install needed repos stage 2
    yum:
      name: desktop-file-utils,dpdk-tools,driverctl,emacs,expect,gcc,gcc-c++,gdb
  - name: Install needed repos stage 3
    yum:
      name: git,graphviz,hwloc,intltool,kernel-devel,libcap-ng
  - name: Install needed repos stage 4
    yum:
      name: libcap-ng-devel,libguestfs,libguestfs-tools-c,libtool,libvirt
  - name: Install needed repos stage 5
    yum:
      name: lshw,openssl,openssl-devel,procps-ng,python3
  - name: Install needed repos stage 6
    yum:
      name: python3-six,rpm-build,selinux-policy-devel,sshpass,sysstat
  - name: Install needed repos stage 7
    yum:
      name: systemd-units,tcpdump,time,tmux,tuned-profiles-cpu-partitioning
  - name: Install needed repos stage 8
    yum:
      name: virt-install,virt-manager,wget
# DRC - Are there any PPC specific files needed here?
  - name: Installing openvswitch packages
    yum:
      name: "{{ ovs_selinux_rpm_path }}, {{ ovs_rpm_path }}"
# DRC - What about using alternatives?  i.e. sudo alternatives --set python /usr/bin/python3
  - name: Create symbolic link for python3
    file:
      src: "/usr/bin/python3"
      dest: "/usr/bin/python"
      state: link
  - name: Create symbolic link for pip3
    file:
      src: "/usr/bin/pip3"
      dest: "/usr/bin/pip"
      state: link

####################################################
# Tweak the system for QEMU and and OVS-DPDK usage #
####################################################

  - name: Modifying selinux params step 1
    lineinfile:
      path: /etc/selinux/config
      regexp: '^SELINUX='
      line: 'SELINUX=permissive'
  - name: Modifying selinux params step 2
    shell: setenforce permissive

#####################################################
# Modify startup parameters for hugepages and iommu #
#####################################################

  - name: Check grub defaults file before hugepage/iommu changes
    stat: path=/etc/default/grub
    register: grub_before
  - name: Changing existing hugepages in grub
    # Hugepages setting should follow hugepagesz setting on the kernel command-line
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\"[^<]*\bhugepages=)(\d+)([^<]*\"$)'
      line: '\g<1>{{ dut_hugepages }}\g<3>'
      backrefs: true
  - name: Adding new hugepages in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\")((?![^<]*\bhugepages=\d+)[^<]*\"$)'
      line: '\g<1>hugepages={{ dut_hugepages }} \g<2>'
      backrefs: true
  - name: Changing existing hugepagesz in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\"[^<]*\bhugepagesz=)(\d+[gGkKmM])([^<]*\"$)'
      line: '\g<1>{{ dut_hugepagesz }}\g<3>'
      backrefs: true
  - name: Adding new hugepagesz in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\")((?![^<]*\bhugepagesz=\d+[gGkKmM])[^<]*\"$)'
      line: '\g<1>hugepagesz={{ dut_hugepagesz }} \g<2>'
      backrefs: true
  - name: Changing existing default_hugepagesz in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\"[^<]*\bdefault_hugepagesz=)(\d+[gGkKmM])([^<]*\"$)'
      line: '\g<1>{{ dut_default_hugepagesz }}\g<3>'
      backrefs: true
  - name: Adding new default_hugepagesz in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\")((?![^<]*\bdefault_hugepagesz=\d+[gGkKmM])[^<]*\"$)'
      line: '\g<1>default_hugepagesz={{ dut_default_hugepagesz }} \g<2>'
      backrefs: true
  - name: Changing existing iommu in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\"[^<]*\biommu=)([a-zA-Z]+)([^<]*\"$)'
      line: '\g<1>{{ dut_iommu_mode }}\g<3>'
      backrefs: true
    when: dut_iommu_mode != "none"
  - name: Adding new iommu in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\")((?![^<]*\biommu=[a-zA-Z]+)[^<]*\"$)'
      line: '\g<1>iommu={{ dut_iommu_mode }} \g<2>'
      backrefs: true
    when: dut_iommu_mode != "none"
  - name: Changing existing intel_iommu in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\"[^<]*\bntel_iommu=)([a-zA-Z]+)([^<]*\"$)'
      line: '\g<1>{{ dut_intel_iommu_mode }}\g<3>'
      backrefs: true
    # This setting is not applicable to Power systems
    when: ansible_architecture != "ppc64le"
  - name: Adding new intel_iommu in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\")((?![^<]*\bintel_iommu=[a-zA-Z]+)[^<]*\"$)'
      line: '\g<1>intel_iommu={{ dut_intel_iommu_mode }} \g<2>'
      backrefs: true
    # This setting is not applicable to Power systems
    when: ansible_architecture != "ppc64le"
  - name: Check for grub configuration changes (iommu/hugepages)
    stat: path=/etc/default/grub
    register: grub_after
  - name: Tweak the kernel for hugepages and iommu step 1
    command: "grub2-editenv - unset kernelopts"
    when: grub_before.stat.checksum != grub_after.stat.checksum
  - name: Tweak the kernel for hugepages and iommu step 2
    command: "grub2-mkconfig -o /boot/grub2/grub.cfg"
    when: grub_before.stat.checksum != grub_after.stat.checksum
    tags: ["grub"]

#########################
# Setup libvirt service #
#########################

# DRC - Should we add a check to change an existing value?
  - name: Set user for libvirt to hugetlbfs
    lineinfile:
      path: /etc/libvirt/qemu.conf
      regexp: '^#group = "root"'
      line: 'group = "hugetlbfs"'
  - name: Enable service libvirtd.service
    service:
      name: libvirtd.service
      enabled: yes
  - name: Start service libvirtd.service, if not started
    service:
      name: libvirtd.service
      state: started

############################################
# Get needed cpu list #
############################################

  - name: Copy up cpulist script to remote DUT
    copy:
      src: get_cpulist.sh
      dest: /root/get_cpulist.sh
  - name: Changing perm of "/root/get_cpu_list.sh", adding "+x"
    file: dest=/root/get_cpulist.sh mode=a+x
  - name: check cpu requirement
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} dut_isolated_cpus
    register: cpu_meet
  - block:
      - debug:
          msg: cpu list can't meet the test requirement, exit the script
      - meta: end_play
    when: cpu_meet.rc != 0
  - name: Get dut_isolated_cpus
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} dut_isolated_cpus
    register: dut_isolated_cpus
  - debug:
      var: dut_isolated_cpus
    when: redhat_debug_mode == true
  - name: Get dut_dpdk_pmd_mask
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} dut_dpdk_pmd_mask
    register: dut_dpdk_pmd_mask
  - debug:
      var: dut_dpdk_pmd_mask
    when: redhat_debug_mode == true
  - name: Get dut_pmd_rxq_affinity
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} dut_pmd_rxq_affinity
    register: dut_pmd_rxq_affinity
  - debug:
      var: dut_pmd_rxq_affinity
    when: redhat_debug_mode == true
  - name: Get vcpu_1
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_1
    register: vcpu_1
    when: ansible_architecture != "ppc64le"
  - debug:
      var: vcpu_1
    when: redhat_debug_mode == true
  - name: Get vcpu_2
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_2
    register: vcpu_2
  - debug:
      var: vcpu_2
    when: redhat_debug_mode == true
  - name: Get vcpu_3
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_3
    register: vcpu_3
  - debug:
      var: vcpu_3
    when: redhat_debug_mode == true
  - name: Get vcpu_4
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_4
    register: vcpu_4
  - debug:
      var: vcpu_4
    when: redhat_debug_mode == true
  - name: Get vcpu_5
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_5
    register: vcpu_5
    when: ansible_architecture == "ppc64le"
  - debug:
      var: vcpu_5
    when: redhat_debug_mode == true
  - name: Get vcpu_6
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_6
    register: vcpu_6
    when: ansible_architecture == "ppc64le"
  - debug:
      var: vcpu_6
    when: redhat_debug_mode == true
  - name: Get vcpu_7
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_7
    register: vcpu_7
    when: ansible_architecture == "ppc64le"
  - debug:
      var: vcpu_7
    when: redhat_debug_mode == true
  - name: Get vcpu_8
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_8
    register: vcpu_8
    when: ansible_architecture == "ppc64le"
  - debug:
      var: vcpu_8
    when: redhat_debug_mode == true
  - name: Get dut_dpdk_lcore_mask
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} dut_dpdk_lcore_mask
    register: dut_dpdk_lcore_mask
  - debug:
      var: dut_dpdk_lcore_mask
    when: redhat_debug_mode == true
  - name: Get vcpu_emulator
    shell: /root/get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_emulator
    register: vcpu_emulator
  - debug:
      var: vcpu_emulator
    when: redhat_debug_mode == true


############################################
# Tune isolated cpus based on t-rex config #
############################################

  - name: Check cpu-partitioning-variables.conf file before isolcpus changes
    stat: path=/etc/tuned/cpu-partitioning-variables.conf
    register: tuned_before
  - name: Adding/modifying isolcpus in cpu-partitioning-variables.conf
    # Changes the value if present, appends the value if missing
    lineinfile:
      path: /etc/tuned/cpu-partitioning-variables.conf
      regexp: '^isolated_cores=.*$'
      line: 'isolated_cores={{ dut_isolated_cpus.stdout }}'
  - name: Check cpu-partitioning-variables.conf file for configuration changes
    stat: path=/etc/tuned/cpu-partitioning-variables.conf
    register: tuned_after
 
  - name: Enable service tuned
    service:
      name: tuned
      enabled: yes
  - name: Selecting tuned cpu-partitioning profile
    shell: tuned-adm profile cpu-partitioning
  - name: Start service tuned, if not started
    service:
      name: tuned
      state: started

  - name: Changing existing isolcpus in grub
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\"[^<]*\bisolcpus=)([0-9,-]+)([^<]*\"$)'
      line: '\g<1>{{ dut_isolated_cpus.stdout }}\g<3>'
      backrefs: true
  - name: Adding new isolcpus in grub (if not already present)
    lineinfile:
      path: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX=\")((?![^<]*\bisolcpus=[0-9,-]+)[^<]*\"$)'
      line: '\g<1>isolcpus={{ dut_isolated_cpus.stdout }} \g<2>'
      backrefs: true
  - name: Check for grub configuration changes (isolated CPUs)
    stat: path=/etc/default/grub
    register: grub_after

  - name: Tweak the kernel isolated list
    command: "grub2-mkconfig -o /boot/grub2/grub.cfg"
    when: grub_before.stat.checksum != grub_after.stat.checksum or tuned_before.stat.checksum != tuned_after.stat.checksum
    tags: ["grub2"]

###################################################
# Reboot t-rex system for settings to take effect #
###################################################

  - name: REBOOTING DUT SERVER NOW
    reboot:
    when: grub_before.stat.checksum != grub_after.stat.checksum

####################
# Getting NIC info #
####################

  - name: Getting pci address of NIC 1
    shell: "ethtool -i {{ dut_interface_1 }} | grep bus-info | awk '{print $2}'"
    register: dut_nic1_pci_address
  - name: finding numa node of nic
    shell: cat /sys/class/net/{{ dut_interface_1}}/device/numa_node
    register: nic1_numa
  - debug:
      var: dut_nic1_pci_address
    when: redhat_debug_mode == true
  - name: Binding nic {{ dut_interface_1 }} to driver {{ dut_driver }}
    shell: "driverctl -v set-override {{ dut_nic1_pci_address.stdout }} {{ dut_driver }}"
    ignore_errors: True

################################
# Starting openvswitch service #
################################

  - name: Enable service openvswitch
    service:
      name: openvswitch
      enabled: yes
  - name: Start service openvswitch, if not started
    service:
      name: openvswitch
      state: started

############################
# Starting OVS-DPDK config #
############################

  - name: Setting up OVS-DPDK config step 1
    shell: "ovs-vsctl set Open_vSwitch . other_config:dpdk-init=true"
  - name: Setting up OVS-DPDK config step 2
    shell: ovs-vsctl set Open_vSwitch . other_config:dpdk-socket-mem=4096
  - name: Setting up OVS-DPDK config step 3
    shell: ovs-vsctl set Open_vSwitch . other_config:pmd-cpu-mask={{ dut_dpdk_pmd_mask.stdout }}
  - name: Setting up OVS-DPDK config step 4
    shell: ovs-vsctl set Open_vSwitch . other_config:dpdk-lcore-mask={{ dut_dpdk_lcore_mask.stdout }}
  - name: Restart service openvswitch
    service:
      name: openvswitch
      state: restarted
  - name: Setting up OVS-DPDK config step 5
    shell: ovs-vsctl --if-exists del-br ovs_pvp_br0
  - name: Setting up OVS-DPDK config step 6
    shell: ovs-vsctl add-br ovs_pvp_br0 -- set bridge ovs_pvp_br0 datapath_type=netdev
  - name: Setting up OVS-DPDK config step 7
    shell: ovs-vsctl add-port ovs_pvp_br0 dpdk0 -- set Interface dpdk0 type=dpdk -- set Interface dpdk0 options:dpdk-devargs="{{ dut_nic1_pci_address.stdout }}" -- set interface dpdk0 options:n_rxq=2 other_config:pmd-rxq-affinity="{{ dut_pmd_rxq_affinity.stdout }}" -- set Interface dpdk0 ofport_request=1
  - name: Setting up OVS-DPDK config step 8
    shell: ovs-vsctl add-port ovs_pvp_br0 vhost0 -- set Interface vhost0 type=dpdkvhostuserclient -- set Interface vhost0 options:vhost-server-path="/tmp/vhost-sock0" -- set interface vhost0 options:n_rxq=2 other_config:pmd-rxq-affinity="{{ dut_pmd_rxq_affinity.stdout }}" -- set Interface vhost0 ofport_request=2

##############################
# Setting up Virtual machine #
##############################
  - stat: path=/opt/images
    register: st
  - name: Creates directory for image storage
    file:
      path: /opt/images
      state: directory
    when: not st.stat.exists
  - stat: path=/opt/images/{{ rhel_guest_image_path }}
    register: st
  - name: Copy image to /opt/images
    copy:
      src: "{{ rhel_guest_image_path }}"
      dest: /opt/images/rhel_guest_image_pvp.qcow2
      remote_src: yes
    when: not st.stat.exists
  - name: Checking status of rhel_loopback image
    virt:
      command: list_vms
    register: all_vms
  - debug:
      var: all_vms
    when: redhat_debug_mode == true
  - name: Stopping rhel_loopback if its started
    virt:
      name: rhel_loopback
      state: destroyed
    when: '"rhel_loopback" in all_vms.list_vms'
  - name: Undefining rhel_loopback if needed
    shell: virsh undefine rhel_loopback
    when: '"rhel_loopback" in all_vms.list_vms'
# DRC - Likely need a different option here for Power
  - name: Running virt-install
    shell: virt-install --connect=qemu:///system --network vhostuser,source_type=unix,source_path=/tmp/vhost-sock0,source_mode=server,model=virtio,driver_queues=2 --network network=default --name=rhel_loopback --disk path=/opt/images/rhel_guest_image_pvp.qcow2,format=qcow2 --ram 8192 --memorybacking hugepages=on,size=1024,unit=M,nodeset=0 --vcpus={{ vcpu_count.stdout }},cpuset={{ vcpu_str.stdout }} --check-cpu --cpu {{ dut_cpu_model }},+pdpe1gb,cell0.id=0,cell0.cpus=0,cell0.memory=8388608 --numatune mode=strict,nodeset=0 --nographics --noautoconsole --import
  - name: Setting permissions on vhost socket folder
    file:
       path: /tmp/vhost-sock0
       mode: 777
  - name: Setting cpu pin for vcpu 0
    shell: virsh vcpupin rhel_loopback 0 {{ vcpu_1.stdout }}
  - name: Setting cpu pin for vcpu 1
    shell: virsh vcpupin rhel_loopback 1 {{ vcpu_2.stdout }}
  - name: Setting cpu pin for vcpu 2
    shell: virsh vcpupin rhel_loopback 2 {{ vcpu_3.stdout }}
  - name: Setting cpu pin for vcpu 3
    shell: virsh vcpupin rhel_loopback 3 {{ vcpu_4.stdout }}
  - name: Setting cpu pin for vcpu 4
    shell: virsh vcpupin rhel_loopback 4 {{ vcpu_5.stdout }}
    when: ansible_architecture == "ppc64le"
  - name: Setting cpu pin for vcpu 5
    shell: virsh vcpupin rhel_loopback 5 {{ vcpu_6.stdout }}
    when: ansible_architecture == "ppc64le"
  - name: Setting cpu pin for vcpu 6
    shell: virsh vcpupin rhel_loopback 6 {{ vcpu_7.stdout }}
    when: ansible_architecture == "ppc64le"
  - name: Setting cpu pin for vcpu 7
    shell: virsh vcpupin rhel_loopback 7 {{ vcpu_8.stdout }}
    when: ansible_architecture == "ppc64le"
  - name: Setting emulator pin for guest
    shell: virsh emulatorpin rhel_loopback {{ vcpu_emulator.stdout }}
  - name: stop rhel guest
    virt:
      name: rhel_loopback
      state: shutdown
  - name: dump xml
    shell: "virsh dumpxml rhel_loopback > /tmp/rhel_loopback.xml"
  - replace:
      dest: /tmp/rhel_loopback.xml
      regexp: "unit='KiB'/>"
      replace: "unit='KiB' memAccess='shared'/>"
  - name: Undefining rhel_loopback
    virt:
      command: undefine
      name: rhel_loopback
  - name: Redefining rhel_loopback with new xml modifications
    shell: virsh define /tmp/rhel_loopback.xml
  - name: Shutdown VM
    virt:
      name: rhel_loopback
      command: destroy
  - name: Configuring VM for network manager
    shell: LIBGUESTFS_BACKEND=direct virt-customize -d rhel_loopback --root-password password:root --uninstall cloud-init --firstboot-command 'nmcli c | grep -o --  "[0-9a-fA-F]\{8\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{4\}-[0-9a-fA-F]\{12\}" | xargs -n 1 nmcli c delete uuid' --firstboot-command 'nmcli con add con-name ovs-dpdk ifname ens2 type ethernet ip4 1.1.1.1/24' --firstboot-command 'nmcli con add con-name management ifname ens3 type ethernet' --firstboot-command 'reboot'
  - name: Starting up VM rhel_loopback
    virt:
      name: rhel_loopback
      state: running
  - name: copying virsh console script to default location
    copy:
      src: ./vm.sh
      dest: ~/vm.sh
      mode: "777"
  - name: Logging into vm rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Setting up subscription manager step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager register --username={{ rh_sub_username }} --password={{ rh_sub_pass }}"
    when: not qe_subscription_mode
  - name: Setting up subscription manager step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager attach --pool={{ rh_sub_pool_id }}"
    when: not qe_subscription_mode
  - name: Using QE Secret sauce to add subscription for repos
    shell: ~/vm.sh run_cmd rhel_loopback "{{ qe_subscription_command }}"
    when: qe_subscription_mode
# DRC - Changeme
  - name: subscribing to appstream on VM rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager repos --enable rhel-8-for-x86_64-appstream-rpms"
  - name: Running yum commandset step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y clean all"
  - name: Running yum commandset step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y update"
  - name: Running yum commandset step 3 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y install driverctl gcc kernel-devel numactl-devel tuned-profiles-cpu-partitioning wget libibverbs dpdk"
  - name: Running yum commandset step 4 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y update kernel"
  - name: Modifying grub for tuning on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "sed -i -e 's/GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"isolcpus=1,2,3 default_hugepagesz=1G hugepagesz=1G hugepages=2 /'  /etc/default/grub"
  - name: Running grub set command step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "grub2-editenv - unset kernelopts"
  - name: Running grub set command step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "grub2-mkconfig -o /boot/grub2/grub.cfg"
  - name: Setting vfio options on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "echo 'options vfio enable_unsafe_noiommu_mode=1' > /etc/modprobe.d/vfio.conf"
  - name: Binding nic to vfio-pci on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "driverctl -v set-override 0000:00:02.0 vfio-pci"
  - name: Starting tuned service step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "systemctl enable tuned"
  - name: Starting runed service step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "systemctl start tuned"
  - name: Setting isolated cores for tuning profile on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "echo isolated_cores=1,2,3 >> /etc/tuned/cpu-partitioning-variables.conf"
  - name: Starting tuned profile cpu-partitioning on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "tuned-adm profile cpu-partitioning"
  - name: Rebooting vm rhel_loopback step 1
    virt:
      name: rhel_loopback
      state: destroyed
  - name: Rebooting vm rhel_loopback step 2
    virt:
      name: rhel_loopback
      state: running
  - name: Logging into VM rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Logging into vm rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Getting IP address from VM
    shell: ~/vm.sh run_cmd rhel_loopback "ip a | grep inet | grep brd | awk '{ print \$2 }'" | grep -A 1 "ip a \| grep inet \| grep brd"   | tail -n 1
    register: vm_ip
  - debug:
      msg: Please note the ip address of the VM as it will be needed when executing the pvp test scripts {{ vm_ip.stdout }}
